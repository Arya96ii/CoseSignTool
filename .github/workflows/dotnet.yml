# Build, test, publish, and upload a release of CoseSignTool
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build, Test, and Publish
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  #release:  # Turn this off once we are creating releases automatically
    #types: [created]
jobs:
  build:
    name: build-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            dir_command: gci -Recurse
            zip_command_debug: Compress-Archive -Path ./debug/ -DestinationPath CoseSignTool-Windows-debug.zip
            zip_command_release: Compress-Archive -Path ./release/ -DestinationPath CoseSignTool-Windows-release.zip
          - os: ubuntu-latest
            dir_command: ls -a -R
            zip_command_debug: zip -r CoseSignTool-Linux-debug.zip ./debug/
            zip_command_release: zip -r CoseSignTool-Linux-release.zip ./release/
          - os: macos-latest
            dir_command: ls -a -R
            zip_command_debug: zip -r CoseSignTool-MacOS-debug.zip ./debug/
            zip_command_release: zip -r CoseSignTool-MacOS-release.zip ./release/

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

 #### This workflow runs on all platforms and handles three different types of builds:
   # 1. Pull request builds: These are triggered by a pull request. They build and test the code, but do not publish or upload release artifacts.
   # 2. Continuous integration builds: These are triggered by a push to the main branch. They build, test, and publish binaries for local use.
   # 3. Release builds: These are triggered by a release, which is created manually. They build, test, and publish binaries, and then zip and upload them to the release.
    
   # Use the Dotnet Test command to load dependencies, build, and test the code.        
    - name: Build and Test debug
      run: dotnet test --verbosity normal CoseSignTool/CoseSignTool.sln
      
    - name: List working directory
      run: ${{ matrix.dir_command }}
  
   # If this is a pull request build, we're done. Otherwise, publish the binaries to ./published.
  
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: | # This section will need tweaking
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

  release_assets:
    name: release-assets
    needs: create_release
    if: ${{ github.event_name != 'pull_request' }} # Can I declare this once for the whole job?
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: # Can I re-use the matrix from the first job?
        include:
          - os: windows-latest
            dir_command: gci -Recurse
            zip_command_debug: Compress-Archive -Path ./debug/ -DestinationPath CoseSignTool-Windows-debug.zip
            zip_command_release: Compress-Archive -Path ./release/ -DestinationPath CoseSignTool-Windows-release.zip
          - os: ubuntu-latest
            dir_command: ls -a -R
            zip_command_debug: zip -r CoseSignTool-Linux-debug.zip ./debug/
            zip_command_release: zip -r CoseSignTool-Linux-release.zip ./release/
          - os: macos-latest
            dir_command: ls -a -R
            zip_command_debug: zip -r CoseSignTool-MacOS-debug.zip ./debug/
            zip_command_release: zip -r CoseSignTool-MacOS-release.zip ./release/

    steps:
    # Not sure if we need to do this again - get this working then try without these steps here.
    - name: Checkout code again
      uses: actions/checkout@v3

   # Note: We have to use the solution files to get the right output paths, due to the mix of .NET 7 and .NET Standard projects.
    - name: Publish outputs
      # if: ${{ github.event_name != 'pull_request' }}
      run: |
        dotnet publish --no-build --configuration Debug --output published/debug CoseSignTool/CoseSignTool.sln
        dotnet publish --configuration Release --output published/release CoseSignTool/CoseSignTool.sln

   # Create zip files for release builds. Skip this step for continuous integration builds.
    - name: Create zip files for release
      # if: ${{ github.event_name != 'pull_request' }}
      run: |
        ${{ matrix.zip_command_debug }}
        ${{ matrix.zip_command_release }}
      working-directory: ./published

   # List the contents of the published directory to make sure all the artifacts are there.
    - name: List published directory
      # if: ${{ github.event_name != 'pull_request' }}
      run: ${{ matrix.dir_command }}
      working-directory: ./published

   # If this is a release build, upload the zipped artifacts.
    - name: Upload release artifacts
      # if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./published/CoseSignTool-${{ matrix.os }}-release.zip
        asset_name: CoseSignTool-${{ matrix.os }}-release.zip
        asset_content_type: application/zip

   # If this is a release build, upload the zipped artifacts.
    - name: Upload debug artifacts
      if: ${{ github.event_name == 'debug' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./published/CoseSignTool-${{ matrix.os }}-debug.zip
        asset_name: CoseSignTool-${{ matrix.os }}-debug.zip
        asset_content_type: application/zip        

      # uses: svenstaro/upload-release-action@v2
      # with:
      #   repo_token: ${{ secrets.GITHUB_TOKEN }}
      #   file: ./published/CoseSignTool-*.zip
      #   file_glob: true
      #   overwrite: true



      

