#### Build, Test, and Publish CoseSignTool ####
#### This workflow runs on all platforms and handles two different types of builds:
  # 1. Pull request builds: These are triggered by a pull request. They build and test the code, but do not publish or upload release artifacts.
  # 2. Continuous integration builds: These are triggered by a push to the main branch. They build, test, create a semantically versioned release, generate a changelog, and publish zipped binaries to the new release.
# To update the Major, Minor, or Prerelease version, create a new Tag with the new version number. The next time a release is created, the version number will be updated. Only the repo owners should create tags.

# TODO: Lock down the perms on tag creation so only the repo owners can do it.

name: Build, Test, and Publish
on:
  push:
    branches: [ "main" ]  # Trigger on pushes to the main branch.
  pull_request:
    branches: [ "*" ]     # Trigger on all branches for pull requests.

jobs:
  # If this is a pull request, create a changelog that includes all the PRs merged since the last release.
  # Otherwise, skip to the build job.
  create_changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v2 # TODO: See if I can get rid of this step here.
      
      # Checkout the working branch and sync the changelog version.
      - name: Fetch and checkout
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "Fetch from repository."
          git fetch
          echo "Undo any user changes to CHANGELOG.md. This is needed because the user's copy becomes obsolete after every checkin."
          git reset -- CHANGELOG.md
          echo "Checkout the working branch."
          git checkout $GITHUB_HEAD_REF

      # Generate the changelog.
      - name: Generate changelog
        if: ${{ github.event_name == 'pull_request' }}
        uses: tj-actions/github-changelog-generator@v1.19
        with:
          output: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}

      # Commit the changelog.
      - name: Commit changelog
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git add CHANGELOG.md
          if git diff-index --quiet HEAD; then
            echo "No changes were logged."
          else
            git commit --allow-empty -m "Update changelog for release"
            git push
          fi
      
      # Print default message if changelog is not updated.
      - name: Print exit message when changelog is not updated
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "Changelog is already up to date."

  # Build and test the code.
  build:
    name: build-${{matrix.os}}
    needs: [ create_changelog ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            dir_command: gci -Recurse
          - os: ubuntu-latest
            dir_command: ls -a -R
          - os: macos-latest
            dir_command: ls -a -R
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Load the dependencies, build, and test the code.        
    - name: Build and Test debug
      run: dotnet test --verbosity normal CoseSignTool/CoseSignTool.sln
    
    # List the contents of the working directory to make sure all the artifacts are there.  
    - name: List working directory
      run: ${{ matrix.dir_command }}

  ######## If this is a pull request build, we're done. ########

  # Create a semantically versioned release.
  # A prerelease is created for every push to the main branch.
  create_release:
    name: Create Release
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code  # TODO: See if I can configure this step, or v3, to replace the Fetch and checkout step below.
      uses: actions/checkout@v3
      # with:
      #   ref: main

    # Checkout the main branch so we can see the correct tag set.
    - name: Fetch and checkout main
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git fetch
        git checkout main

    # Create a semantically versioned tag that increments the last release.
    - name: Create SemVer tag
      id: semver-tag    # Output: ${{ steps.semver-tag.outputs.semver_tag }}
      uses: wakatime/semver-action@v1.6.0
      with:
        main_branch_name: "main"
        debug: true

    # # Set the tag name and release type, based on whether the workflow was triggered by a tag or by a push to Main.
    # - name: Choose tag and release type
    #   id: choose-tag
    #   run: |
    #     if [[ ${{ github.ref }} == refs/tags/* ]]; then
    #       echo "This is an official release. Setting tag to ${{ github.ref }}."
    #       echo "::set-output name=TAG_NAME::${{ github.ref }}"
    #       echo "::set-output name=is_prerelease::false"
    #     else
    #       echo "This is an automated release. Setting tag to ${{ steps.semver-tag.outputs.semver_tag }}."
    #       echo "::set-output name=TAG_NAME::${{ steps.semver-tag.outputs.semver_tag }}"
    #       echo "::set-output name=is_prerelease::true"
    #     fi

    # Create the release.
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Get the tag name and release name from the previous step.
        tag_name: ${{ steps.semver-tag.outputs.semver_tag }}
        release_name: Release ${{ steps.semver-tag.outputs.semver_tag }}

        # Generate release text from changelog.
        body_path: ./CHANGELOG.md

        # Always use prerelease for automated releases. Official releases are created manually.
        prerelease: true

    # Upload the release artifacts.
    - name: Call Upload Assets action
      uses: ./.github/workflows/UploadAssets.yml@main
