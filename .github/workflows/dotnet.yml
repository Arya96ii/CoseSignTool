#### Build, Test, and Publish CoseSignTool ####
#### This workflow runs on all platforms and handles two different types of builds:
  # 1. Pull request builds: These are triggered by a pull request. They build and test the code, but do not publish or upload release artifacts.
  # 2. Continuous integration builds: These are triggered by a push to the main branch. They build, test, create a semantically versioned release, generate a changelog, and publish zipped binaries to the new release.
# To update the Major, Minor, or Prerelease version, create a new Tag with the new version number. The next time a release is created, the version number will be updated. Only the repo owners should create tags.

# TODO: Lock down the perms on tag creation so only the repo owners can do it.

name: Build, Test, and Publish
on:
  push:
    branches: [ "main" ]  # Trigger on pushes to the main branch.
  pull_request:
    branches: [ "*" ]     # Trigger on all branches for pull requests.
  release:
    types: [ created ]    # Trigger on new releases.

jobs:

  #### PULL REQUEST EVENTS ####

  # Create a changelog that includes all the PRs merged since the last release.
  # If it's not a pull request, skip to the build job.
  create_changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v2 # TODO: See if I can get rid of this step here.
      
      # Checkout the working branch and sync the changelog version.
      - name: Fetch and checkout
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "Fetch from repository."
          git fetch
          echo "Undo any user changes to CHANGELOG.md. This is needed because the user's copy becomes obsolete after every checkin."
          git reset -- CHANGELOG.md
          echo "Checkout the working branch."
          git checkout $GITHUB_HEAD_REF

      # Generate the changelog.
      - name: Generate changelog
        if: ${{ github.event_name == 'pull_request' }}
        uses: tj-actions/github-changelog-generator@v1.19
        with:
          output: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}

      # Commit the changelog.
      - name: Commit changelog
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git add CHANGELOG.md
          if git diff-index --quiet HEAD; then
            echo "No changes were logged."
          else
            git commit --allow-empty -m "Update changelog for release"
            git push
          fi
      
      # Print default message if changelog is not updated.
      - name: Print exit message when changelog is not updated
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "Changelog is already up to date."

#### SHARED PULL REQUEST AND PUSH EVENTS ####

  # Build and test the code.
  build:
    name: build-${{matrix.os}}
    needs: [ create_changelog ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            dir_command: gci -Recurse
          - os: ubuntu-latest
            dir_command: ls -a -R
          - os: macos-latest
            dir_command: ls -a -R
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Use the Dotnet Test command to load dependencies, build, and test the code.        
    - name: Build and Test debug
      run: dotnet test --verbosity normal CoseSignTool/CoseSignTool.sln
    
    # List the contents of the working directory to make sure all the artifacts are there.  
    - name: List working directory
      run: ${{ matrix.dir_command }}

  #### PUSH EVENTS ####

  # Create a semantically versioned release.
  # A prerelease is created for every push to the main branch.
  # Official releases are created manually on GitHub.
  create_release:
    name: Create Release
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code  # TODO: See if I can configure this step, or v3, to replace the Fetch and checkout step below.
      uses: actions/checkout@v3
      # with:
      #   ref: main

    # Checkout the main branch so we can see the correct tag set.
    - name: Fetch and checkout main
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git fetch
        git checkout main

    # Create a semantically versioned tag that increments the last release.
    - name: Create SemVer tag
      id: semver-tag    # Output: ${{ steps.semver-tag.outputs.semver_tag }}
      uses: wakatime/semver-action@v1.6.0
      with:
        main_branch_name: "main"
        debug: true

    # Create the release. This should generate a release event, which will trigger the release_assets job.
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # Get the tag name and release name from the previous step.
        tag_name: ${{ steps.semver-tag.outputs.semver_tag }}
        release_name: Release ${{ steps.semver-tag.outputs.semver_tag }}

        # Generate release text from changelog.
        body_path: ./CHANGELOG.md

        # Always use prerelease for automated releases. Official releases are created manually.
        prerelease: true

  #### RELEASE EVENTS ####

  # Publish and zip the binaries and upload them to the release.      
  release_assets:
    name: release-assets
    if: ${{ github.event_name == 'release' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            dir_command: gci -Recurse
            zip_command_debug: Compress-Archive -Path ./debug/ -DestinationPath CoseSignTool-Windows-debug.zip
            zip_command_release: Compress-Archive -Path ./release/ -DestinationPath CoseSignTool-Windows-release.zip
          - os: ubuntu-latest
            dir_command: ls -a -R
            zip_command_debug: zip -r CoseSignTool-Linux-debug.zip ./debug/
            zip_command_release: zip -r CoseSignTool-Linux-release.zip ./release/
          - os: macos-latest
            dir_command: ls -a -R
            zip_command_debug: zip -r CoseSignTool-MacOS-debug.zip ./debug/
            zip_command_release: zip -r CoseSignTool-MacOS-release.zip ./release/

    steps:
    # Checkout the branch.
    - name: Checkout code again
      uses: actions/checkout@v3

    # Build and publish the binaries to ./published.
    # Note: We have to use the solution files to get the right output paths, due to the mix of .NET 7 and .NET Standard projects.
    - name: Publish outputs
      run: |
        dotnet publish --configuration Debug --output published/debug CoseSignTool/CoseSignTool.sln
        dotnet publish --configuration Release --output published/release CoseSignTool/CoseSignTool.sln

      # TODO: See if I can get these to run with --no-build.

    # Create zip files for release.
    - name: Create zip files for the release
      run: |
        ${{ matrix.zip_command_debug }}
        ${{ matrix.zip_command_release }}
      working-directory: ./published

    # List the contents of the published directory to make sure all the artifacts are there.
    - name: List published directory
      run: ${{ matrix.dir_command }}
      working-directory: ./published

    # Upload the zipped assets to the release.
    - name: Upload artifacts
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./published/CoseSignTool-*.zip
        file_glob: true
        overwrite: true